#-----------------
#Provision instances
#-----------------
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    key_name: my-key
    region: us-east-2
    image: ami-07efac79022b86107

  tasks:
    #Create Security Groups
    - name: Ensure security group exists for Builer node
      ec2_group:
        name: BuilderAppSecurityGroup
        description: Security group for Java App Bilder node with port 22 enabled
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: Ensure security group exists for Production node
      ec2_group:
        name: ProdAppSecurityGroup
        description: Security group for Production node with ports 22 and 8080 enabled
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    #Provision AWS instances
    - name: Ensure a builder node is provisioned
      ec2:
        key_name: "{{ key_name }}"
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: awsBuilderNode
        region: "{{ region }}"
        group: BuilderAppSecurityGroup
        count: 1
      register: awsBuilder

    - name: Ensure a production node is provisioned
      ec2:
        key_name: "{{ key_name }}"
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: awsProductionNode
        region: "{{ region }}"
        group: ProdAppSecurityGroup
        count: 1
      register: awsProduction

    #Get AWS instance Public IPs and Add to Ansible Hosts
    - name: Add public IP of builder
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsBuilder
      loop: "{{ awsBuilder.instances }}"

    - name: Add public IP of prod
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsProduction
      loop: "{{ awsProduction.instances }}"

    #Wait until instances start
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsBuilder.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsProduction.instances }}"

#-----------------
#Install packages
#-----------------
- name: Configure EC2 instance
  hosts: awsBuilder
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False
  tasks:
    - name: Update repo cache
      raw: apt-get update
    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present
