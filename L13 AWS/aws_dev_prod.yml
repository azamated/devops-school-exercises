#-----------------
#Provision instances
#-----------------
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    region: us-east-2
    image: ami-07efac79022b86107

  tasks:
   #Create SSH key pair and save it on local machine
    - name: create key pair
      ec2_key:
        name: aws-key
        region: us-east-2
      register: ec2_key_result

    - name: Save private key
      copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/id_rsa" mode=0600
      when: ec2_key_result.changed

    #Create Security Groups for Prod and Dev
    - name: Ensure security group exists for Builer node
      ec2_group:
        name: BuilderAppSecurityGroup
        description: Security group for Java App Bilder node with port 22 enabled
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: Ensure security group exists for Production node
      ec2_group:
        name: ProdAppSecurityGroup
        description: Security group for Production node with ports 22 and 8080 enabled
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    #Provision AWS instances
    - name: Ensure a builder node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: buildAWS
        region: "{{ region }}"
        group: BuilderAppSecurityGroup
        count: 1
      register: awsBuilder

    - name: Ensure a production node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: prodAWS
        region: "{{ region }}"
        group: ProdAppSecurityGroup
        count: 1
      register: awsProduction

    #Get AWS instance Public IPs and Add to Ansible Hosts
    - name: Add public IP of builder
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsBuilder
      loop: "{{ awsBuilder.instances }}"

    - name: Add public IP of prod
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsProduction
      loop: "{{ awsProduction.instances }}"

    #Wait until instances start
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsBuilder.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsProduction.instances }}"

#-----------------
#Prepare builder node and build web app
#-----------------
- name: Configure EC2 instance
  hosts: awsBuilder
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Ensure maven is installed
      apt:
        name: maven
        state: present

    - name: Ensure jave source code is present
      git:
        repo: https://github.com/azamated/boxfuse-sample-java-war-hello.git
        version: master
        dest: /tmp/box

    - name: Build java source code with maven
      command: mvn package -f /tmp/box

#-----------------
#Build docker image, deploy web app and push an AWS registry
#-----------------
    - name: Build docker image
      command: docker build -f /tmp/box/Dockerfile -t boxfuse_webapp_v1 /tmp/box

    #- name: ecr-repo
    #  ecs_ecr: name=azamated

    - name: Tag docker image
      command: docker tag boxfuse_webapp_v1 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfuse_webapp_v1

    - name: Login to ECR
      command: docker login -u AWS -p eyJwYXlsb2FkIjoiSVVpMWxOV05raWpTWnE5VTg0UDhUQmFtK3draTNEcjk2b2pjTkFodFN5Yk9uS1dGb0VRcVh0S05JQXM0ZWVrYzNvMTAxWDU1ZDFsdmU3Y241NW9PZ3lFZUxNMFE0ZkVBN1lMcGg0S243aXJwYlY5d3U3TVh6R29CaFBxY2JlZjdGNjN1aW84bm5XcE0welpjaTR1bFZOaFlHaWRzTTBsZGVKMFZDeXlwdTNFOVFuL3UxcDcyU0t3N2cxM0FjQ1hYSThJWXM0UmQvbE8wYmI0NCtKYW1SN01oU0JLV0xDNDQ0WU9FdWlvS1pkbkRYZkR3c25kS0FDRjIyMmxyYjlPT2FSWlExc3RDZUE4djJxL042OVRKclJPTkpqVDV2TkZMWjgxSTdOSzVZVjZmV3hSU2hHUFNqMTdWYlhTeE1xT25KWUc1aHRwNTRab1NSVDNvdEp3VFI1ZGlyTmQ2eDBNU24vM0hTTUd4TmJzZS93NHdiK1MrMGM5NU44eGJoTWlCK2w3UkhMRk14SmpWb0RMOUFnVk9FNDVYY3ArVXV2OUpkZFNSNjJVUE4vNjc2VTV0RzBMbStvb1plQ3VNL2FYN2tPdlhHbVhOTzZjd3NCb2V4UTNTY1F4cjVjNHZqNll3RUhUaHVuT1ZGU1JFNHdmVitRZDYrTjVrVGJZdmFnaUdWOHhYdzk2QkJ4NHhpRW9VY20ydy9MMGxHeDRZWlRqdEliczBWRVVIN0RFZUFVamxIcjQ0SHp1SmF1aFVjRW9pWUZIYVVlTGJOYVZDeG9FbStYandzeUk0dEhuL1U0NDVjNEJFUktCTm1TUGpjSTVlQXZCeko3OEt0MXZlaWl4WHE3bEtqVjJoZTM0SjhWMUxVbXdpU2VEQ1M4ck01WmJsbDJSK2ROVmk5M3RINjdpK3M4VmpKa083K2QzYnNtVTlXVnJzelo0dGVUYjdZK1pGbnE1ZVBjVXAvcmxUbldzTi9pL2FUUWsyem5qbHBva1ZxTGU1MTFrZExNWG5ZRkVLU3Y1V0ZVcnllVDhuVFpKWjVLb2xTYng2T2tJWEhtT3hhUzJ0eHk3a3V6MVdDTVo5K2hVcUY0YWl3YXpmWkFSS2E3L2pwblpwaXpmakNiZ3dNM1R5Mml5c1NwMnNrWlpDOGRsSXMvbFNDODFqS20rODBVOENweGZXWVN5ZWxJU3Z2LzNkTkhJL0hBTVVKZE5lc3ZXckZYTXpGcFkxVkdsL0FYRXVoR2srckZFU1ZWdzRXT0tyWVJCbkRmZitZbTY3V0VRNytMa0JNMTJjYngvV0JZck1hVmc2bHpoSnhadGpTTFJvd1pmQlFBTDI2d0NvYjl6WG4wYlMrQmhGcXYvdnZya1BZZ2dLZlRCRTVER2FYeDBYTWNFTjE1eWJoeG1wTlRPNVp3SlI1REplWVR2UTBKdEhIZzFwODNLa0FNbWZjd0FLWU5CVnFlQ00zMk9TTVlkMGxaSW1yeFZJVGpNUHNhNVlGYytSYjZ4R2l5WmxJbEU4SlpRcjVucG9BUTNMV0FrR1dWT3hTbndYOXN4aHl1Z2JPMXFsIiwiZGF0YWtleSI6IkFRRUJBSGpCNy9pZ3dNZzROUHdhdXJ4U0lZeDRIZm54dUdjLzQ4YkR3dndEcE5ZV1pnQUFBSDR3ZkFZSktvWklodmNOQVFjR29HOHdiUUlCQURCb0Jna3Foa2lHOXcwQkJ3RXdIZ1lKWUlaSUFXVURCQUV1TUJFRURGOUlPSjVYVWNPdXhNYTZZQUlCRUlBN2FqSUFVSndZVmR1NGJ1d1pJM3JySWkrcnJTNXliU3RiaFVGNXhuLzBGbi8xM3dZQlJ1WFltelVjZit6U0E0NmhhT0Q0TThUVzl4dFpKLzA9IiwidmVyc2lvbiI6IjIiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNjAzNDUzMDUzfQ==

    - name: Push dockerimage to ECR
      command: docker push 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfuse_webapp_v1

#-----------------
#Prepare production node and run docker image
#-----------------
- name: Configure EC2 instance
  hosts: awsProduction
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Pull dockerimage from ECR
      command: docker pull 013898691880.dkr.ecr.us-east-2.amazonaws.com/azamated/boxfuse_webapp_v1

    - name: Run docker with app
      command: docker build -d -p 8080:8080 boxfuse_webapp_v1