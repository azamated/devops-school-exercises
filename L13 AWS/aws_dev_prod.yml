#-----------------
#Provision instances
#-----------------
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    region: us-east-2
    image: ami-07efac79022b86107

  tasks:
   #Create SSH key pair and save it on local machine
    - name: create key pair
      ec2_key:
        name: aws-key
        region: us-east-2
      register: ec2_key_result

    - name: Save private key
      copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/id_rsa" mode=0600
      when: ec2_key_result.changed

    #Create Security Groups for Prod and Dev
    - name: Ensure security group exists for Builer node
      ec2_group:
        name: BuilderAppSecurityGroup
        description: Security group for Java App Bilder node with port 22 enabled
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: Ensure security group exists for Production node
      ec2_group:
        name: ProdAppSecurityGroup
        description: Security group for Production node with ports 22 and 8080 enabled
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    #Provision AWS instances
    - name: Ensure a builder node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: buildAWS
        region: "{{ region }}"
        group: BuilderAppSecurityGroup
        count: 1
      register: awsBuilder

    - name: Ensure a production node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: prodAWS
        region: "{{ region }}"
        group: ProdAppSecurityGroup
        count: 1
      register: awsProduction

    #Get AWS instance Public IPs and Add to Ansible Hosts
    - name: Add public IP of builder
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsBuilder
      loop: "{{ awsBuilder.instances }}"

    - name: Add public IP of prod
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsProduction
      loop: "{{ awsProduction.instances }}"

    #Wait until instances start
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsBuilder.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsProduction.instances }}"

#-----------------
#Prepare builder node and build web app
#-----------------
- name: Configure EC2 instance
  hosts: awsBuilder
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Ensure maven is installed
      apt:
        name: maven
        state: present

    - name: Ensure jave source code is present
      git:
        repo: https://github.com/azamated/boxfuse-sample-java-war-hello.git
        version: master
        dest: /tmp/box

    - name: Build java source code with maven
      command: mvn package -f /tmp/box

#-----------------
#Build docker image, deploy web app and push an AWS registry
#-----------------
    - name: Build docker image
      command: docker build -f /tmp/box/Dockerfile -t boxfuse_webapp_v1 /tmp/box

    #- name: ecr-repo
    #  ecs_ecr: name=azamated

    - name: Tag docker image
      command: docker tag boxfuse_webapp_v1 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfuse_webapp_v1

    - name: Login to ECR
      command: docker login -u AWS -p eyJwYXlsb2FkIjoid1A1T2lWRWtKNFNJZS9CSmlNN3EwVE9IRGU4clJySDVPNmdMSmhJRXVIaDNaOGtiSWsza0ZpTUFPS3RXdEs1OWRocFhSYUFuRVNHaG9CeWFpc015dmtFTFFDZCtyby9lMy8zMjVTT0xtK0dWYmp0a21oWkpraGNIWU9lRnJTNGZqMHQrYnJEZzV0K1JDZnVndXBISVZ0MVpBTFRhVXFSeTlUVzQrLzFKNDlJaE5RK3M1eTF4SDAyQ09PQk5lbDdZcmdBcU9HbFh0aWw3a1htL2IvTXo5OWVKZElVUHdZdWhlcy9URmZ0eEF4R0dFTnJSSVhHZnJ5VCtYaTY3OXFRaElqWkhoZnlWQnpkc0lDcjFCamZtUlBFT1cyTUdKK0dZNGwxR29tUE5kaW1TV01FbXlEdmhzN0hTdW9TUDMxNWVmSGNOQm0vN3FLaFBTOHBPMURiOU81bm5hSlJ1STBoWnJha3VoeHBxNnVYQUx6K0twWG41a2FvT2hxQlFIb0ZxY0UzMFk2b2Y4bVdBcnY2UkVSYXZTNkRuMWNNbnZBUFAyN09rYWc5SnBSM2F1Z2RVT2hobGNhMGI1ZXdENnR3cnJoUUc1dXF1RGtNaU5Eb2NxY2NqYldxMy9TZHdGVjZvQnQ5dE4yYXhFSzlkQXZSYTlQWlF5eWpPOEVyeDVtWitDaDcyQlR0MnFiR2tqcWhXUDdRSTd5dHNwdHR4NXRXMStMa2MzZkRkZDBHRFY3ZmhLaU9OMWtZQkhZaTQ3OWxrd1F3NzZPRFE0VkVaTG1PUHZLbnVSMXNWZGc0SWVXRmpiY1QybG80Y3ovOGp5bU8yWUpud2Q3MTZWUWVOZklIVUZlSlFUOWVseEhjcmZYT241K1I1ek9JQkpOTjFtdktBYkFkbjhHWGV5M0FEVW4yMWRCanZRUjlEU0lLcnFZV1ZuRit4QXNsN09rZndkbkxXUnhzVTViNlVHeTRBaW1NZFZ6QTBxMlJudGZLOS9Uayt4VHNERFBmMldQUHlkVHVUbXB6Y2xoSFZnL1U2V3o1R3RULy94aFB3UzNqVU1RK0pGclc4Uzd0ZHZkZFZPN1RiOUIxekltRzRCVk5yOTJJVzdOMEJoRnIycEpDL2lZR3FSRThweW4wOGNsZmRSU2c0SGxTOFVRL3hWdXFCK0VKZy93WDE0TysvL2VYZUNvY0RKSzJvNFNyRThDYUR5Wk5FL3hMSjQzelRlZHVmWURwMmtsVEh2MTVyZUY0TnVHNjc1YnRyOUxTNmdycFByb1R6L3o0S2gxaU5rREdXcTlTRnUwUG1RU2luOS9DMk5rQkRUVnQrK0RKYUF5Smg4c0xERDBrbEhTK1NaaC81cTFQbEl5MDkxdXZSclVrOWVIRTk3RndKUkQ0NklLN01tRjllUExtZFJLVWxoenFsUE9oRUZ2NnBhRmVsci9ZWFdTL1R5OHRONHVmUnlYRndyOUN5NzBJdmJKTU9OYkR1TU9zbTh6ZnNwYVhyWUttMUYrUkJXVWVhOEowU0VxdjlBazBWNSt4bmNmTUl2azFPa2VNZlJYSm9OZTF2IiwiZGF0YWtleSI6IkFRRUJBSGpCNy9pZ3dNZzROUHdhdXJ4U0lZeDRIZm54dUdjLzQ4YkR3dndEcE5ZV1pnQUFBSDR3ZkFZSktvWklodmNOQVFjR29HOHdiUUlCQURCb0Jna3Foa2lHOXcwQkJ3RXdIZ1lKWUlaSUFXVURCQUV1TUJFRURPbzdhR2VUakpaaW42cFV6Z0lCRUlBNzIycnRSUUEyM3JmU0V0RlNNZ1dwM0Q3WitoQng0RFhxR0RxR2N3UkNQUmR0SmU5Zlc2QnZxUG9EQTRGS2dsd0FaTVBEbllNcmhuaVNzZXc9IiwidmVyc2lvbiI6IjIiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNjAzNDUyODg3fQ== -e none https://013898691880.dkr.ecr.us-east-2.amazonaws.com

    - name: Push dockerimage to ECR
      command: docker push 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfuse_webapp_v1

#-----------------
#Prepare production node and run docker image
#-----------------
- name: Configure EC2 instance
  hosts: awsProduction
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Pull dockerimage from ECR
      command: docker pull 013898691880.dkr.ecr.us-east-2.amazonaws.com/azamated/boxfuse_webapp_v1

    - name: Run docker with app
      command: docker build -d -p 8080:8080 boxfuse_webapp_v1