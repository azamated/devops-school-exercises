#-----------------
#Prfepare and Provision instances
#-----------------
- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    region: us-east-2
    image: ami-07efac79022b86107

  tasks:
   #Create SSH key pair and save it on local machine
    - name: create key pair
      ec2_key:
        name: aws-key
        region: us-east-2
      register: ec2_key_result

    - name: Save private key
      copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/id_rsa" mode=0600
      when: ec2_key_result.changed

    #Create Security Groups for Prod and Dev
    - name: Ensure security group exists for Builer node
      ec2_group:
        name: BuilderAppSecurityGroup
        description: Security group for Java App Bilder node with port 22 enabled
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: Ensure security group exists for Production node
      ec2_group:
        name: ProdAppSecurityGroup
        description: Security group for Production node with ports 22 and 8080 enabled
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    #Provision AWS instances
    - name: Ensure a builder node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: buildAWSnode1
        region: "{{ region }}"
        group: BuilderAppSecurityGroup
        count: 1
      register: awsBuilder

    - name: Ensure a production node is provisioned
      ec2:
        key_name: aws-key
        instance_type: t2.micro
        image: "{{ image }}"
        wait: yes
        id: prodAWSnode1
        region: "{{ region }}"
        group: ProdAppSecurityGroup
        count: 1
      register: awsProduction

    #Get AWS instance Public IPs and Add to Ansible Hosts
    - name: Add public IP of builder
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsBuilder
      loop: "{{ awsBuilder.instances }}"

    - name: Add public IP of prod
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: awsProduction
      loop: "{{ awsProduction.instances }}"

    #Wait until instances start
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ awsBuilder.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 2
        timeout: 320
        state: started
      with_items: "{{ awsProduction.instances }}"

    #Add EC2 instances to known hosts
    - name: Add EC2 awsBuilder as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ awsBuilder.instances }}"

    - name: Add EC2 awsProduction as known hosts
      known_hosts:
        name: "{{ item.public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
      with_items: "{{ awsProduction.instances }}"

#-----------------
#Configure the builder node and build web app
#-----------------
- name: Configure EC2 instance
  hosts: awsBuilder
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure aws directory is created
      file:
        path: ~/.aws
        state: directory
        mode: 0755

    - name: Ensure AWS config presents
      copy:
        src: ~/.aws/config
        dest: ~/.aws/config
        mode: 0600

    - name: Ensure AWS keys present
      copy:
        src: ~/.aws/credentials
        dest: ~/.aws/credentials
        mode: 0600

    #Build java source code, deploy web app & push it to AWS registry

    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Ensure maven is installed
      apt:
        name: maven
        state: present

    - name: Ensure awscli is installed
      apt:
        name: awscli
        state: present

    - name: Ensure jave source code is present
      git:
        repo: https://github.com/azamated/boxfuse-sample-java-war-hello.git
        version: master
        dest: /tmp/box

    - name: Build java source code with maven
      command: mvn package -f /tmp/box

    #Build docker image, deploy web app & push it to AWS registry

    - name: Build docker image
      command: docker build -f /tmp/box/Dockerfile -t boxfusewebapp /tmp/box

    - name: Tag docker image
      command: docker tag boxfusewebapp:latest 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfusewebapp:latest

    - name: Login to ECR
      shell: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 013898691880.dkr.ecr.us-east-2.amazonaws.com

    - name: Create repo in ECR
      shell: aws ecr create-repository --repository-name boxfusewebapp

#-----------------
#Configure the production node and run docker image
#-----------------
- name: Configure EC2 instance
  hosts: awsProduction
  remote_user: ubuntu
  become: yes
  become_user: root
  gather_facts: False

  tasks:
    - name: Update repo cache and install dependencies
      raw: apt-get update && apt-get install python -y

    - name: Ensure aws directory is created
      file:
        path: ~/.aws
        state: directory
        mode: 0755

    - name: Ensure AWS config presents
      copy:
        src: ~/.aws/config
        dest: ~/.aws/config
        mode: 0600

    - name: Ensure AWS keys present
      copy:
        src: ~/.aws/credentials
        dest: ~/.aws/credentials
        mode: 0600

    #Pull the docker image and run on production
    - name: Ensure docker is installed
      apt:
        name: docker.io
        state: present

    - name: Ensure awscli is installed
      apt:
        name: awscli
        state: present

    - name: Login to ECR
      shell: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 013898691880.dkr.ecr.us-east-2.amazonaws.com

    - name: Pull dockerimage from ECR
      command: docker pull 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfusewebapp:latest

    - name: Run docker with app
      command: docker run -d -p 8080:8080 013898691880.dkr.ecr.us-east-2.amazonaws.com/boxfusewebapp